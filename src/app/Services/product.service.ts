import { Product } from "../Modals/Product/product.modal";
import { Size } from '../Modals/Product/size.modal';
import { DummyServer } from './dummy-server.service';
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { HttpService } from './http.service';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';

@Injectable()
export class ProductService{

    products = {}
    productsSearchData = new Subject<Array<Product>>()

    constructor(private router: Router, private httpService: HttpService, private http: HttpClient){
    }
    ngOnInit(){
    }
    getProductByID(id){
        return this.products[id]
    }

    addNewProduct(product: object){
        /*
            Input       :   NgForm Object value
            Output      :   Void
            Description :   Adds a product to DB by sending http request
                            response recieved would be 'id' generated by DB
                            using which we store the product locally.
        */
        this.httpService.addProduct(product).subscribe(
          (response) => {

              var prod = new Product()
              prod.copyDataFromJSON(product)
              prod.id = response['id']

              this.products[prod.id] = prod
              this.router.navigate(['/product/', prod.id])
            },
          (error) => console.log(error)
        );
    }
    updateProduct(product: Product, productJSON: object){
        /*
            Input       :   Updated Product in both 'Product' format and 'JSON' format
            Output      :   Void
            Description :   Updates a product locally and then sends
                            http request to update in DB as well.
        */
        
        this.products[product.id] = product

        this.httpService.updateProduct(productJSON).subscribe(
          (response) => console.log(response),
          (error) => console.log(error)
        );
    }
    deleteProduct(id: string){
        /*
            Input       :   Product ID
            Output      :   Void
            Description :   Deletes a product locally and then sends
                            http request to delete in DB as well.
        */
        delete this.products[id]

        this.httpService.deleteProduct(id).subscribe(
          (response) => console.log(response),
          (error) => console.log(error)
        );
    }
    fetchProducts(formValues: object){
        /*
            Input       :   NgForm Object Value containing parameters
            Output      :   Array of 'Product' objects using 'Subject'
            Description :   Sends a http request to perform DB search query
                            based on given parameters. For params object attributes
                            refer to httpService
        */
        this.httpService.fetchProducts(formValues).subscribe(
            (results) => {
                console.log(results)
                var productResults = []
                for(let prod of results){
                    var p = new Product()
                    p.copyDataFromJSON(prod)
                    
                    this.products[p.id] = p
                    productResults.push(p)
                }
                this.productsSearchData.next(productResults)
            },
            (error) => console.log(error)
        )
    }
}